@using System.Reflection
@using System.Globalization
@using System.ComponentModel
@using System.ComponentModel.DataAnnotations
@using BudgetManagement.Domain.Entities
@using BudgetManagement.Web.Common.Models
@using BudgetManagement.Web.Common.Services


@if (Records is not null && Records.Any())
{
    var props = GetVisibleProperties();

    // دادهٔ اعمال‌شده (Sort + Paging)
    var sorted = TableSortService.Sort(Records, State.SortColumn, State.SortAscending);
    State.TotalRecords = Records.Count;
    var pageItems = TablePaginationService.Paginate(sorted, State.CurrentPage, State.PageSize).ToList();

    <table class="table table-striped table-bordered table-sm">
        <thead>
            <tr>
                <th style="width:72px;">ردیف</th>
                @foreach (var prop in props)
                {
                    var header = GetHeader(prop);
                    <th class="@GetSortClass(prop.Name)"
                        @onclick="() => ChangeSort(prop.Name)">
                        @header
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            @for (var i = 0; i < pageItems.Count; i++)
            {
                var rec = pageItems[i];
                var rowIndex = (State.CurrentPage - 1) * State.PageSize + i + 1;

                <tr>
                    <td>@rowIndex</td>
                    @foreach (var prop in props)
                    {
                        var value = prop.GetValue(rec);
                        <td>@FormatCell(value, prop.PropertyType)</td>
                    }
                </tr>
            }
        </tbody>
    </table>

    <div class="d-flex justify-content-between align-items-center">
        <div>مجموع: @State.TotalRecords | صفحه @State.CurrentPage از @State.TotalPages</div>
        <div class="btn-group">
            <button class="btn btn-sm btn-outline-secondary" @onclick="GoToFirst" disabled="@(State.CurrentPage == 1)">⏭ اول</button>
            <button class="btn btn-sm btn-outline-secondary" @onclick="PrevPage" disabled="@(State.CurrentPage == 1)">قبلی</button>

            @for (var i = 1; i <= State.TotalPages; i++)
            {
                var pageNumber = i; // فریز مقدار صفحه برای هر دکمه
                                    <button class="btn btn-sm @(pageNumber == State.CurrentPage ? "btn-primary" : "btn-outline-primary")"
                                            @onclick="() => GoToPage(pageNumber)">
                                        @pageNumber
                                    </button>
            }

            <button class="btn btn-sm btn-outline-secondary" @onclick="NextPage" disabled="@(State.CurrentPage == State.TotalPages)">بعدی</button>
            <button class="btn btn-sm btn-outline-secondary" @onclick="GoToLast" disabled="@(State.CurrentPage == State.TotalPages)">آخر ⏮</button>
        </div>
    </div>
}
else
{
    <div class="alert alert-info">هیچ رکوردی برای نمایش وجود ندارد.</div>
}

@code {
    [Parameter]
    public List<BudgetRecord>? Records { get; set; }

    private TableState State { get; set; } = new() { PageSize = 10 };

    private void ChangeSort(string column)
    {
        if (State.SortColumn == column)
            State.SortAscending = !State.SortAscending;
        else
        {
            State.SortColumn = column;
            State.SortAscending = true;
        }
        State.ResetPaging(); // با تغییر Sort از صفحه ۱ شروع کن
        StateHasChanged();
    }

    private string GetSortClass(string column)
    {
        if (State.SortColumn != column) return "sortable";
        return State.SortAscending ? "sortable asc" : "sortable desc";
    }

    private void GoToFirst() => State.CurrentPage = 1;

    private void GoToLast()
    {
        if (State.TotalPages > 0)
            State.CurrentPage = State.TotalPages;
    }

    private void PrevPage()
    {
        if (State.CurrentPage > 1)
            State.CurrentPage--;
    }

    private void NextPage()
    {
        if (State.CurrentPage < State.TotalPages)
            State.CurrentPage++;
    }

    private void GoToPage(int p)
    {
        if (p < 1) p = 1;
        if (p > State.TotalPages) p = State.TotalPages;
        State.CurrentPage = p;
        StateHasChanged();
    }

    // ======= متدهای کمکی برای هدر و قالب‌بندی =======

    private static List<PropertyInfo> GetVisibleProperties()
    {
        var props = typeof(BudgetRecord)
            .GetProperties(BindingFlags.Public | BindingFlags.Instance)
            .Where(p => p.CanRead)
            .Where(p => p.GetCustomAttribute<BrowsableAttribute>()?.Browsable != false)
            .Select(p => new
            {
                Prop = p,
                Order = p.GetCustomAttribute<DisplayAttribute>()?.GetOrder(),
                Header = GetHeader(p)
            })
            .OrderBy(x => x.Order ?? int.MaxValue)
            .ThenBy(x => x.Header, StringComparer.CurrentCulture)
            .Select(x => x.Prop)
            .ToList();

        return props;
    }

    private static string GetHeader(PropertyInfo p)
    {
        var displayName = p.GetCustomAttribute<DisplayNameAttribute>()?.DisplayName;
        if (!string.IsNullOrWhiteSpace(displayName)) return displayName!;
        var display = p.GetCustomAttribute<DisplayAttribute>();
        var name = display?.GetName();
        if (!string.IsNullOrWhiteSpace(name)) return name!;
        return p.Name;
    }

    private static string FormatCell(object? value, Type propertyType)
    {
        if (value is null) return "-";

        if (value is DateTime dt) return dt.ToString("yyyy/MM/dd", CultureInfo.InvariantCulture);
        if (value is DateTimeOffset dto) return dto.ToString("yyyy/MM/dd", CultureInfo.InvariantCulture);

        if (value is string s)
        {
            if (TryParseDate(s, out var parsed))
                return parsed.ToString("yyyy/MM/dd", CultureInfo.InvariantCulture);
            return s;
        }

        switch (value)
        {
            case decimal dec: return dec.ToString("#,0", CultureInfo.InvariantCulture);
            case double dbl: return dbl.ToString("#,0.##", CultureInfo.InvariantCulture);
            case float fl: return fl.ToString("#,0.##", CultureInfo.InvariantCulture);
            case long l: return l.ToString("#,0", CultureInfo.InvariantCulture);
            case int i: return i.ToString("#,0", CultureInfo.InvariantCulture);
            case short sh: return sh.ToString("#,0", CultureInfo.InvariantCulture);
            case bool b: return b ? "بله" : "خیر";
            case Enum e: return e.ToString();
        }
        return value.ToString() ?? "-";
    }

    private static bool TryParseDate(string input, out DateTime date)
    {
        var formats = new[]
        {
            "yyyy/MM/dd","yyyy/M/d",
            "yyyy-MM-dd","yyyy-M-d",
            "dd/MM/yyyy","d/M/yyyy",
            "MM/dd/yyyy","M/d/yyyy"
        };

        if (DateTime.TryParseExact(input, formats, CultureInfo.InvariantCulture,
                                   DateTimeStyles.AllowWhiteSpaces, out date))
            return true;

        return DateTime.TryParse(input, CultureInfo.InvariantCulture,
                                 DateTimeStyles.AllowWhiteSpaces, out date);
    }
}
