@using System.Reflection
@using System.Globalization
@using System.ComponentModel
@using System.ComponentModel.DataAnnotations
@using BudgetManagement.Domain.Entities
@using BudgetManagement.Web.Common.Models
@using BudgetManagement.Web.Common.Services
@using Microsoft.AspNetCore.Components
@inject NavigationManager NavManager

@if (Records is not null && Records.Any())
{
    var props = GetVisibleProperties();
    var sorted = TableSortService.Sort(Records, State.SortColumn, State.SortAscending);
    State.TotalRecords = Records.Count;
    var pageItems = TablePaginationService.Paginate(sorted, State.CurrentPage, State.PageSize).ToList();

    <table class="table table-striped table-bordered table-sm text-center">
        <thead>
            <tr>
                <th style="width:72px;" class="text-center center-cell">ردیف</th>

                @if (ShowActions)
                {
                    <th style="width:140px;" class="text-center center-cell">عملیات</th>
                }

                @foreach (var prop in props)
                {
                    var header = GetHeader(prop);
                    <th class="@GetSortClass(prop.Name) text-center center-cell"
                        @onclick="() => ChangeSort(prop.Name)">
                        @header
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            @for (var i = 0; i < pageItems.Count; i++)
            {
                var rec = pageItems[i];
                var rowIndex = (State.CurrentPage - 1) * State.PageSize + i + 1;

                <tr>
                    <td class="text-center center-cell">@rowIndex</td>

                    @if (ShowActions)
                    {
                        <td class="text-center center-cell">
                            <div class="d-flex flex-column align-items-center gap-1">
                                <button type="button" class="btn btn-sm btn-warning"
                                        @onclick="() => EditRecord(rec.SubProjectCode)">
                                    <i class="bi bi-pencil-fill"></i> ویرایش
                                </button>

                                <button type="button" class="btn btn-sm btn-danger"
                                        @onclick="() => ShowDeleteModal(rec.SubProjectCode)">
                                    <i class="bi bi-trash-fill"></i> حذف
                                </button>
                            </div>
                        </td>
                    }

                    @foreach (var prop in props)
                    {
                        var value = prop.GetValue(rec);
                        <td class="text-center center-cell @(HighlightedColumns.Contains(prop.Name) ? "highlight-cell" : "")">
                            @FormatCell(value, prop.PropertyType)
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>


    @* Modal حذف (Bootstrap) *@
    @if (ShowModal)
    {
        <div class="modal show d-block" tabindex="-1" role="dialog" style="background: rgba(0,0,0,0.5);">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">تأیید حذف</h5>
                        <button type="button" class="close" aria-label="Close" @onclick="CloseModal">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <p>آیا از حذف رکورد با کد زیر پروژه <strong>@DeleteSubProjectCode</strong> مطمئن هستید؟ این عملیات قابل بازگشت نیست.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">انصراف</button>
                        <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteAsync">حذف</button>
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="d-flex justify-content-between align-items-center">
        <div>مجموع: @State.TotalRecords | صفحه @State.CurrentPage از @State.TotalPages</div>
        <div class="btn-group">
            <button class="btn btn-sm btn-outline-secondary" @onclick="GoToFirst" disabled="@(State.CurrentPage == 1)">⏭ اول</button>
            <button class="btn btn-sm btn-outline-secondary" @onclick="PrevPage" disabled="@(State.CurrentPage == 1)">قبلی</button>

            @for (var i = 1; i <= State.TotalPages; i++)
            {
                var pageNumber = i;
                <button class="btn btn-sm @(pageNumber == State.CurrentPage ? "btn-primary" : "btn-outline-primary")"
                        @onclick="() => GoToPage(pageNumber)">
                    @pageNumber
                </button>
            }

            <button class="btn btn-sm btn-outline-secondary" @onclick="NextPage" disabled="@(State.CurrentPage == State.TotalPages)">بعدی</button>
            <button class="btn btn-sm btn-outline-secondary" @onclick="GoToLast" disabled="@(State.CurrentPage == State.TotalPages)">آخر ⏮</button>
        </div>
    </div>
}
else
{
    <div class="alert alert-info">هیچ رکوردی برای نمایش وجود ندارد.</div>
}


@code {
    [Parameter] public List<BudgetRecord>? Records { get; set; }

    // حذف بر اساس SubProjectCode
    [Parameter] public Func<string, Task>? DeleteRecordAsync { get; set; }

    // اطلاع به والد با SubProjectCode
    [Parameter] public EventCallback<string> OnDeleted { get; set; }

    [Parameter] public bool ShowActions { get; set; } = false;

    private TableState State { get; set; } = new() { PageSize = 10 };

    private static readonly string[] HighlightedColumns = new[]
    {
        "AdjustmentAmount",
        "MaxRequiredCredit",
        "CreditDeficitSupply",
        "CreditDeficitCommitment"
    };

    private bool ShowModal;
    private string? DeleteSubProjectCode;

    private void EditRecord(string SubProjectCode) => NavManager.NavigateTo($"/BudgetEditForm/{SubProjectCode}");

    private void ShowDeleteModal(string SubProjectCode)
    {
        DeleteSubProjectCode = SubProjectCode;
        ShowModal = true;
    }

    private void CloseModal()
    {
        ShowModal = false;
        DeleteSubProjectCode = null;
    }

    private async Task ConfirmDeleteAsync()
    {
        if (string.IsNullOrWhiteSpace(DeleteSubProjectCode))
        {
            ShowModal = false;
            return;
        }

        if (DeleteRecordAsync is null)
        {
            ShowModal = false;
            return;
        }

        try
        {
            await DeleteRecordAsync.Invoke(DeleteSubProjectCode);

            // به‌روز کردن UI بدون بارگذاری مجدد
            if (Records is not null)
            {
                Records.RemoveAll(r => r.SubProjectCode == DeleteSubProjectCode);
                State.TotalRecords = Records.Count;

                var maxPages = Math.Max(1, (int)Math.Ceiling(State.TotalRecords / (double)State.PageSize));
                if (State.CurrentPage > maxPages) State.CurrentPage = maxPages;
            }

            if (OnDeleted.HasDelegate)
                await OnDeleted.InvokeAsync(DeleteSubProjectCode);
        }
        finally
        {
            ShowModal = false;
            StateHasChanged();
            DeleteSubProjectCode = null;
        }
    }

    private void ChangeSort(string column)
    {
        if (State.SortColumn == column)
            State.SortAscending = !State.SortAscending;
        else
        {
            State.SortColumn = column;
            State.SortAscending = true;
        }
        State.ResetPaging();
        StateHasChanged();
    }

    private string GetSortClass(string column)
    {
        if (State.SortColumn != column) return "sortable";
        return State.SortAscending ? "sortable asc" : "sortable desc";
    }

    private void GoToFirst() => State.CurrentPage = 1;

    private void GoToLast()
    {
        if (State.TotalPages > 0)
            State.CurrentPage = State.TotalPages;
    }

    private void PrevPage()
    {
        if (State.CurrentPage > 1)
            State.CurrentPage--;
    }

    private void NextPage()
    {
        if (State.CurrentPage < State.TotalPages)
            State.CurrentPage++;
    }

    private void GoToPage(int p)
    {
        if (p < 1) p = 1;
        if (p > State.TotalPages) p = State.TotalPages;
        State.CurrentPage = p;
        StateHasChanged();
    }

    private static List<PropertyInfo> GetVisibleProperties()
    {
        var props = typeof(BudgetRecord)
            .GetProperties(BindingFlags.Public | BindingFlags.Instance)
            .Where(p => p.CanRead)
            .Where(p => p.GetCustomAttribute<BrowsableAttribute>()?.Browsable != false)
            .Select(p => new
            {
                Prop = p,
                Order = p.GetCustomAttribute<DisplayAttribute>()?.GetOrder(),
                Header = GetHeader(p)
            })
            .OrderBy(x => x.Order ?? int.MaxValue)
            .ThenBy(x => x.Header, StringComparer.CurrentCulture)
            .Select(x => x.Prop)
            .ToList();

        return props;
    }

    private static string GetHeader(PropertyInfo p)
    {
        var displayName = p.GetCustomAttribute<DisplayNameAttribute>()?.DisplayName;
        if (!string.IsNullOrWhiteSpace(displayName)) return displayName!;
        var display = p.GetCustomAttribute<DisplayAttribute>();
        var name = display?.GetName();
        if (!string.IsNullOrWhiteSpace(name)) return name!;
        return p.Name;
    }

    private static string FormatCell(object? value, Type propertyType)
    {
        if (value is null) return "-";

        // تاریخ‌ها
        if (value is DateTime dt) return dt.ToString("yyyy/MM/dd", CultureInfo.InvariantCulture);
        if (value is DateTimeOffset dto) return dto.ToString("yyyy/MM/dd", CultureInfo.InvariantCulture);

        // رشته‌هایی که ممکن است تاریخ باشند
        if (value is string s)
        {
            if (TryParseDate(s, out var parsed))
                return parsed.ToString("yyyy/MM/dd", CultureInfo.InvariantCulture);
            return s;
        }

        // بولین
        if (value is bool b) return b ? "بله" : "خیر";

        // اعداد صحیح
        if (value is sbyte or byte or short or ushort or int or uint or long or ulong)
            return Convert.ToDecimal(value).ToString("N0", CultureInfo.CurrentCulture);

        // اعداد اعشاری
        if (value is float or double or decimal)
            // return Convert.ToDecimal(value).ToString("N2", CultureInfo.CurrentCulture);
            return Convert.ToDecimal(value).ToString("N0", CultureInfo.CurrentCulture);

        // Enum
        if (propertyType.IsEnum || value is Enum)
            return value.ToString() ?? "-";

        // سایر انواع
        return value.ToString() ?? "-";
    }

    private static bool TryParseDate(string input, out DateTime result)
    {
        var formats = new[]
        {
            "yyyy/MM/dd", "yyyy-MM-dd",
            "dd/MM/yyyy", "dd-MM-yyyy",
            "MM/dd/yyyy", "MM-dd-yyyy",
            "yyyy/M/d", "d/M/yyyy", "M/d/yyyy",
            "yyyyMMdd"
        };

        return DateTime.TryParseExact(input,
                                      formats,
                                      CultureInfo.InvariantCulture,
                                      DateTimeStyles.None,
                                      out result);
    }
}
