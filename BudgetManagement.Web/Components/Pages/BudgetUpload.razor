@page "/BudgetUpload"
@rendermode InteractiveServer
@using BudgetManagement.Domain.Entities
@using BudgetManagement.Application.DTOs.Budget
@using BudgetManagement.Application.Interfaces
@using Microsoft.AspNetCore.Components.Forms

@inject IBudgetImportUseCase ImportUseCase

<h3>Budget Upload</h3>

<div class="d-flex gap-2 align-items-center mb-2">
    <InputFile OnChange="OnInputFileChange" accept=".xlsx,.xls" />
    <span class="text-muted">@Status</span>
</div>

<div class="d-flex gap-2 mb-2">
    <button class="btn btn-secondary" @onclick="Preview" disabled="@(_file == null)">پیش‌ نمایش</button>
    <button class="btn btn-primary" @onclick="Import" disabled="@(_file == null)">واردسازی</button>
</div>

@if (PreviewResult != null)
{
    <div class="alert alert-info">
        <p><strong>تعداد کل رکوردها:</strong> @PreviewResult.TotalParsed</p>
        <p><strong>رکوردهای معتبر:</strong> @PreviewResult.TotalValid</p>
        <p><strong>تعداد خطاها:</strong> @(PreviewResult.Errors?.Count ?? 0)</p>
    </div>

    @if (PreviewResult.Errors?.Any() == true)
    {
        <div class="alert alert-warning">
            <ul class="mb-0">
                @foreach (var err in PreviewResult.Errors)
                {
                    <li>@err</li>
                }
            </ul>
        </div>
    }
}

<hr />

<BudgetTable Records="Records" />

@code {
    private IBrowserFile? _file;
    private List<BudgetRecord>? Records;
    private string? Status;
    private ImportBudgetResultDto? PreviewResult;

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        _file = e.File;
        Records = null;
        PreviewResult = null;
        Status = _file != null ? $"فایل انتخاب شد: {_file.Name}" : "فایلی انتخاب نشد.";
    }

    private async Task Preview()
    {
        if (_file == null) return;
        try
        {
            Status = "در حال پیش ‌نمایش...";
            await using var ms = new MemoryStream();
            await _file.OpenReadStream(1024L * 1024 * 64).CopyToAsync(ms);
            ms.Position = 0;

            PreviewResult = await ImportUseCase.PreviewAsync(ms);
            Records = PreviewResult.ValidRecords; // جدول دقیقا با رکوردهای معتبر پر می‌شود

            Status = "پیش‌ نمایش کامل شد.";
        }
        catch (Exception ex)
        {
            Status = $"خطا در پیش‌ نمایش: {ex.Message}";
        }
    }

    private async Task Import()
    {
        if (_file == null) return;
        try
        {
            Status = "در حال واردسازی...";
            await using var ms = new MemoryStream();
            await _file.OpenReadStream(1024L * 1024 * 64).CopyToAsync(ms);
            ms.Position = 0;

            var result = await ImportUseCase.ImportAsync(ms);
            // می‌توانید پس از واردسازی، جدول را با همان رکوردهای معتبر یا داده‌های تازه از DB به‌روز کنید
            Records = result.ValidRecords;

            Status = $"واردسازی کامل شد: درج {result.InsertedCount} - به‌روزرسانی {result.UpdatedCount}";
        }
        catch (Exception ex)
        {
            Status = $"خطا در واردسازی: {ex.Message}";
        }
    }
}
