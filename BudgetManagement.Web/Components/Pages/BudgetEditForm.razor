@page "/BudgetEditForm/{SubProjectCode}"
@rendermode InteractiveServer

@using AutoMapper
@using BudgetManagement.Application.DTOs
@using BudgetManagement.Application.Interfaces
@using BudgetManagement.Domain.Entities
@using Microsoft.AspNetCore.Components.Forms

@inject IBudgetRepository BudgetRepository
@inject IMapper Mapper
@inject NavigationManager Nav

<h4 class="mb-3">ویرایش رکورد بودجه</h4>

@if (notFound || model is null)
{
    <div class="alert alert-warning">
        رکوردی با کد زیرپروژه <strong>@SubProjectCode</strong> پیدا نشد.
        <button class="btn btn-sm btn-outline-primary ms-2" @onclick="GoBack">بازگشت</button>
    </div>
}
else if (model is not null)
{
    <EditForm Model="model" OnValidSubmit="HandleSaveAsync" FormName="bgtEditForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row g-3">

            <div class="col-md-4">
                <label class="form-label">کد زیرپروژه</label>
                <InputText @bind-Value="model.SubProjectCode" class="form-control" readonly />
                <div class="form-text text-warning">این فیلد قابل تغییر نیست.</div>
            </div>

            <div class="col-md-4">
                <label class="form-label">عنوان قرارداد</label>
                <InputText @bind-Value="model.ContractTitle" class="form-control" />
            </div>

            <div class="col-md-4">
                <label class="form-label">شماره قرارداد</label>
                <InputText @bind-Value="model.ContractNumber" class="form-control" />
            </div>

            <div class="col-md-4">
                <label class="form-label">تاریخ قرارداد</label>
                @* <InputText @bind-Value="model.ContractDate" class="form-control" /> *@
                <CustomizeInputPersianDatePicker @bind-Value="model.ContractDate" />
            </div>

            <div class="col-md-4">
                <label class="form-label">پیمانکار</label>
                <InputText @bind-Value="model.Contractor" class="form-control" />
            </div>

            <div class="col-md-4">
                <label class="form-label">کارگزار</label>
                <InputText @bind-Value="model.Agent" class="form-control" />
            </div>

            <div class="col-md-4">
                <label class="form-label">وضعیت قرارداد</label>
                @* <InputText @bind-Value="model.ContractStatus" class="form-control" /> *@
                <div class="input-group">
                    <InputSelect @bind-Value="model.ContractStatus" class="form-select">
                        <option value="">-- انتخاب کنید --</option>
                        @foreach (var dept in ContractStatusOptions)
                        {
                            <option value="@dept">@dept</option>
                        }
                    </InputSelect>
                </div>
            </div>

            <div class="col-md-4">
                <label class="form-label">مبلغ کل قرارداد</label>
                <InputNumber @bind-Value="model.TotalContractAmount" class="form-control" />
            </div>

            <div class="col-md-4">
                <label class="form-label">مبلغ اولیه</label>
                <InputNumber @bind-Value="model.InitialAmount" class="form-control" />
            </div>

            <div class="col-md-4">
                <label class="form-label">مبلغ کل تامین اعتبار سال جاری</label>
                <InputNumber @bind-Value="model.CurrentYearTotalCredit" class="form-control" />
            </div>

            <div class="col-md-4">
                <label class="form-label">کل مبلغ تامین از ابتدای پیمان</label>
                <InputNumber @bind-Value="model.TotalCreditFromStart" class="form-control" />
            </div>

            <div class="col-md-4">
                <label class="form-label">معاونت اجرایی</label>
                @* <InputText @bind-Value="model.ExecutiveDept" class="form-control" /> *@
                <div class="input-group">
                    <InputSelect @bind-Value="model.ExecutiveDept" class="form-select">
                        <option value="">-- انتخاب کنید --</option>
                        @foreach (var dept in ExecutiveDeptOptions)
                        {
                            <option value="@dept">@dept</option>
                        }
                    </InputSelect>
                </div>
            </div>

            <div class="col-md-4">
                <label class="form-label">تاریخ شروع</label>
                <CustomizeInputPersianDatePicker @bind-Value="model.StartDate" />
            </div>

            <div class="col-md-4">
                <label class="form-label">تاریخ خاتمه</label>
                <CustomizeInputPersianDatePicker @bind-Value="model.EndDate" />
            </div>

            <div class="col-md-4">
                <label class="form-label">تاریخ تمدید یافته</label>
                <CustomizeInputPersianDatePicker @bind-Value="model.ExtendedEndDate" />
            </div>

            <div class="col-md-4">
                <label class="form-label">نحوه ارجاع کار</label>
                @* <InputText @bind-Value="model.WorkReferralMethod" class="form-control" /> *@
                <div class="input-group">
                    <InputSelect @bind-Value="model.WorkReferralMethod" class="form-select">
                        <option value="">-- انتخاب کنید --</option>
                        @foreach (var dept in WorkReferralMethodOptions)
                        {
                            <option value="@dept">@dept</option>
                        }
                    </InputSelect>
                </div>
            </div>

            <div class="col-md-4">
                <label class="form-label">مبلغ کل صورت وضعیت‌ها</label>
                <InputNumber @bind-Value="model.TotalInvoicesAmount" class="form-control" />
            </div>

            <div class="col-md-4">
                <label class="form-label">مبلغ کل کارکرد</label>
                <InputNumber @bind-Value="model.TotalWorkProgress" class="form-control" />
            </div>

            <div class="col-md-4">
                <label class="form-label">مبلغ صورت وضعیت‌ها در سال جاری</label>
                <InputNumber @bind-Value="model.CurrentYearInvoicesAmount" class="form-control" />
            </div>

            <div class="col-md-4">
                <label class="form-label">شماره تأمین</label>
                <InputText @bind-Value="model.CreditNumber" class="form-control" />
            </div>

            <div class="col-md-4">
                <label class="form-label">ماهیت</label>
                @* <InputText @bind-Value="model.Nature" class="form-control" /> *@
                <div class="input-group">
                    <InputSelect @bind-Value="model.Nature" class="form-select">
                        <option value="">-- انتخاب کنید --</option>
                        @foreach (var dept in NatureOptions)
                        {
                            <option value="@dept">@dept</option>
                        }
                    </InputSelect>
                </div>
            </div>

            <div class="col-md-4">
                <label class="form-label">مبلغ تعدیل</label>
                <InputNumber @bind-Value="model.AdjustmentAmount" class="form-control highlight-number" />
            </div>

            <div class="col-md-4">
                <label class="form-label">حداکثر اعتبار موردنیاز</label>
                <InputNumber @bind-Value="model.MaxRequiredCredit" class="form-control highlight-number" />
            </div>

            <div class="col-md-4">
                <label class="form-label">کسری اعتبار تامین</label>
                <InputNumber @bind-Value="model.CreditDeficitSupply" class="form-control highlight-number" />
            </div>

            <div class="col-md-4">
                <label class="form-label">کسری اعتبار تعهد</label>
                <InputNumber @bind-Value="model.CreditDeficitCommitment" class="form-control highlight-number" />
            </div>
        </div>

        @if (!string.IsNullOrWhiteSpace(message))
        {
            <div class="alert alert-success mt-3">@message</div>
        }

        <div class="mt-4 d-flex gap-2">
            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                @(isSaving ? "در حال ذخیره..." : "ذخیره")
            </button>

            <button type="button" class="btn btn-outline-secondary" @onclick="GoBack" disabled="@isSaving">انصراف</button>
        </div>

    </EditForm>
}



@code {
    [Parameter]
    public string? SubProjectCode { get; set; }

    private BudgetRecordEditDto? model;
    private BudgetRecord? entity;
    private bool notFound = false;
    private bool isSaving = false;
    private string? message;
    private List<string> ExecutiveDeptOptions = new();
    private List<string> ContractStatusOptions = new();
    private List<string> WorkReferralMethodOptions = new();
    private List<string> NatureOptions = new();
}

@functions {
    protected override async Task OnInitializedAsync()
    {
        notFound = false;
        message = null;

        if (string.IsNullOrWhiteSpace(SubProjectCode))
        {
            notFound = true;
            return;
        }
        else
        {
            // فقط یکبار entity و model رو مقداردهی میشود
            entity = await BudgetRepository.GetBySubProjectCodeAsync(SubProjectCode!);
            notFound = entity is null;
            if (entity is not null && model is null) // ❗ شرط مهم
            {
                ExecutiveDeptOptions = await BudgetRepository.GetExecutiveDeptAsync();
                ContractStatusOptions = await BudgetRepository.GetContractStatusAsync();
                WorkReferralMethodOptions = await BudgetRepository.GetWorkReferralMethodAsync();
                NatureOptions = await BudgetRepository.GetNatureAsync();

                model = Mapper.Map<BudgetRecordEditDto>(entity);
            }
        }
    }

    private async Task HandleSaveAsync()
    {
        isSaving = true;
        message = null;

        try
        {
            if (model is null || entity is null) return;

            // انتقال تغییرات از DTO به entity
            Mapper.Map(model, entity);

            await BudgetRepository.SaveChangesAsync();

            message = "اطلاعات با موفقیت ذخیره شد ✅";
        }
        catch (Exception ex)
        {
            message = $"خطا در ذخیره‌سازی: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }

    private void GoBack() => Nav.NavigateTo("/BudgetEdit");
}