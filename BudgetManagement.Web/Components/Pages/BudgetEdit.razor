@page "/BudgetEdit"
@rendermode InteractiveServer
@using BudgetManagement.Domain.Entities
@using BudgetManagement.Application.Interfaces
@using System.Globalization;
@inject IBudgetRepository BudgetRepository

<h3>ویرایش اطلاعات</h3>

<div class="card shadow-sm border-0 mb-3" style="direction: rtl; text-align: right;">
    <div class="card-body bg-light rounded-3">
        <p class="mb-0" style="font-size: 1.1rem;">
            📌 در صورت نیاز از فیلترهای جستجو استفاده کنید.
        </p>
    </div>
</div>

<EditForm Model="@filters" OnValidSubmit="@SearchAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row g-3">
        <div class="col-md-4">
            <label class="form-label">کد زیرپروژه</label>
            <InputText @bind-Value="filters.SubProjectCode" class="form-control" />
        </div>

        <div class="col-md-4">
            <label class="form-label">عنوان قرارداد</label>
            <InputText @bind-Value="filters.ContractTitle" @oninput="UpdateTitleSuggestions" class="form-control" list="titleList" />
            <datalist id="titleList">
                @foreach (var title in titleSuggestions)
                {
                    <option value="@title" />
                }
            </datalist>
        </div>

        <div class="col-md-4">
            <label class="form-label">شماره قرارداد</label>
            <InputText @bind-Value="filters.ContractNumber" class="form-control" />
        </div>

        <div class="col-md-4">
            <label class="form-label">معاونت اجرایی</label>
            <div class="input-group">
                <InputSelect @bind-Value="filters.ExecutiveDept" class="form-select">
                    <option value="">-- انتخاب کنید --</option>
                    @foreach (var dept in ExecutiveDeptOptions)
                    {
                        <option value="@dept">@dept</option>
                    }
                </InputSelect>
            </div>
        </div>

        <div class="col-md-4">
            <label class="form-label">از تاریخ قرارداد</label>
            <InputText @bind-Value="filters.StartContractDate" class="form-control" placeholder="yyyy/MM/dd" />
        </div>

        <div class="col-md-4">
            <label class="form-label">تا تاریخ قرارداد</label>
            <InputText @bind-Value="filters.EndContractDate" class="form-control" placeholder="yyyy/MM/dd" />
        </div>
    </div>

    <div class="mt-4">
        <button type="submit" class="btn btn-primary">جستجو</button>
    </div>
</EditForm>

@if (isSearching)
{
    <div class="alert alert-info mt-3">در حال جستجو...</div>
}
else if (results is not null && results.Any())
{
    <div class="mt-4">
        <BudgetTable Records="@results" ShowActions="true" DeleteRecordAsync="@DeleteAsync" />
    </div>
}
else if (results is not null)
{
    <div class="alert alert-warning mt-4">هیچ رکوردی مطابق فیلترها یافت نشد.</div>
}

@code {
    private FilterModel filters = new();
    private List<BudgetRecord>? results;
    private bool isSearching = false;

    private List<string> titleSuggestions = new();
    private List<string> ExecutiveDeptOptions = new();



    private async Task SearchAsync()
    {
        isSearching = true;

        DateTime? start = TryParseDate(filters.StartContractDate);
        DateTime? end = TryParseDate(filters.EndContractDate);

        var all = await BudgetRepository.GetAllAsync();

        results = all
            .Where(r =>
            {
                // فیلترهای متنی
                bool matchSubProject = string.IsNullOrWhiteSpace(filters.SubProjectCode) ||
                                       r.SubProjectCode.Contains(filters.SubProjectCode.Trim(), StringComparison.OrdinalIgnoreCase);

                bool matchTitle = string.IsNullOrWhiteSpace(filters.ContractTitle) ||
                                  r.ContractTitle.Contains(filters.ContractTitle.Trim(), StringComparison.OrdinalIgnoreCase);

                bool matchNumber = string.IsNullOrWhiteSpace(filters.ContractNumber) ||
                                   r.ContractNumber.Contains(filters.ContractNumber.Trim(), StringComparison.OrdinalIgnoreCase);

                // فیلترهای انتخابی
                bool ExecutiveDept = string.IsNullOrWhiteSpace(filters.ExecutiveDept) ||
                                       r.ExecutiveDept.Contains(filters.ExecutiveDept.Trim(), StringComparison.OrdinalIgnoreCase);

                // تبدیل تاریخ قرارداد
                DateTime? contractDate = TryParseDate(r.ContractDate?.ToString());

                bool matchStart = !start.HasValue || (contractDate.HasValue && contractDate.Value >= start.Value);
                bool matchEnd = !end.HasValue || (contractDate.HasValue && contractDate.Value <= end.Value);

                return matchSubProject && matchTitle && matchNumber && ExecutiveDept && matchStart && matchEnd;
            })
            .ToList();

        isSearching = false;
    }

    private DateTime? TryParseDate(string dateStr)
    {
        if (string.IsNullOrWhiteSpace(dateStr))
            return null;

        // تلاش برای تبدیل تاریخ میلادی
        if (DateTime.TryParse(dateStr, out var gregorianDate))
            return gregorianDate;

        // تلاش برای تبدیل تاریخ شمسی (فرمت: yyyy/MM/dd یا yyyy-MM-dd)
        var persianCalendar = new PersianCalendar();
        string[] formats = { "yyyy/MM/dd", "yyyy-M-d", "yyyy/M/d", "yyyy-MM-dd" };

        foreach (var format in formats)
        {
            if (DateTime.TryParseExact(dateStr, format, CultureInfo.InvariantCulture, DateTimeStyles.None, out var persianDate))
            {
                try
                {
                    int year = int.Parse(dateStr.Split('/', '-')[0]);
                    int month = int.Parse(dateStr.Split('/', '-')[1]);
                    int day = int.Parse(dateStr.Split('/', '-')[2]);

                    return persianCalendar.ToDateTime(year, month, day, 0, 0, 0, 0);
                }
                catch
                {
                    return null;
                }
            }
        }

        return null;
    }


    private async Task DeleteAsync(string subProjectCode)
    {
        await BudgetRepository.DeleteBySubProjectCodeAsync(subProjectCode);
        await BudgetRepository.SaveChangesAsync();

        if (results is not null)
        {
            results.RemoveAll(r => r.SubProjectCode == subProjectCode);
        }
    }

    private async Task UpdateTitleSuggestions(ChangeEventArgs e)
    {
        var input = e.Value?.ToString()?.Trim();
        if (string.IsNullOrWhiteSpace(input)) return;

        var all = await BudgetRepository.GetAllAsync();
        titleSuggestions = all
            .Select(r => r.ContractTitle)
            .Where(t => t.Contains(input, StringComparison.OrdinalIgnoreCase))
            .Distinct()
            .Take(10)
            .ToList();
    }

    protected async override Task OnInitializedAsync()
    {
        var all = await BudgetRepository.GetAllAsync();
        ExecutiveDeptOptions = all
            .Select(r => r.ExecutiveDept)
            .Distinct()
            .ToList();

        // filters.ExecutiveDept = null; Pre-select a ExecutiveDeputy
    }

    private class FilterModel
    {
        public string? SubProjectCode { get; set; }
        public string? ContractTitle { get; set; }
        public string? ContractNumber { get; set; }
        public string? StartContractDate { get; set; }
        public string? EndContractDate { get; set; }
        public string? ExecutiveDept { get; set; }
    }
}
