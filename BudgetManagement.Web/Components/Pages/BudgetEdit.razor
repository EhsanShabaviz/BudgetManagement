@page "/BudgetEdit"
@rendermode InteractiveServer

@using BudgetManagement.Domain.Entities
@using BudgetManagement.Application.Interfaces
@using System.Globalization;
@using BudgetManagement.Web.Extensions


@inject IBudgetRepository BudgetRepository

@attribute [Authorize(Policy = "User")]

<h3>ویرایش اطلاعات</h3>

<div class="card shadow-sm border-0 mb-3" style="direction: rtl; text-align: right;">
    <div class="card-body bg-light rounded-3">
        <p class="mb-0" style="font-size: 1.1rem;">
            📌 در صورت نیاز از فیلترهای جستجو استفاده کنید.
        </p>
    </div>
</div>

<EditForm Model="@filters" OnValidSubmit="@SearchAsync">

    <div class="row g-3">
        <div class="col-12 col-md-2">
            <label class="form-label">کد زیرپروژه</label>
            <InputText @bind-Value="filters.SubProjectCode" class="form-control" />
        </div>

        <div class="col-12 col-md-8">
            <label class="form-label">عنوان قرارداد</label>
            <InputText @bind-Value="filters.ContractTitle"
                       @oninput="UpdateTitleSuggestions"
                       class="form-control"
                       list="titleList" />
            <datalist id="titleList">
                @foreach (var title in titleSuggestions)
                {
                    <option value="@title" />
                }
            </datalist>
        </div>

        <div class="d-none d-md-block col-md-7"><!-- filler --></div>
    </div>

    <div class="row g-3 mt-2">
        <div class="col-12 col-md-2">
            <label class="form-label">شماره قرارداد</label>
            <InputText @bind-Value="filters.ContractNumber" class="form-control" />
        </div>

        <div class="col-12 col-md-4">
            <label class="form-label">معاونت اجرایی</label>
            <div class="input-group">
                <InputSelect @bind-Value="filters.ExecutiveDept" class="form-select">
                    <option value="">-- انتخاب کنید --</option>
                    @foreach (var dept in ExecutiveDeptOptions)
                    {
                        <option value="@dept">@dept</option>
                    }
                </InputSelect>
            </div>
        </div>

        <div class="col-12 col-md-2">
            <label class="form-label">از تاریخ قرارداد</label>
            @* <InputPersianDatePicker @bind-Value="filters.StartContractDate"
                                    CalendarIconPosition="IconPosition.Right"
                                    CalendarType=Blazor.PersianDatePicker.Calendar.SingleModeJalali
                                    DigitType="DigitType.English"
                                    MinDateSetOnToday="false"
                                    Placeholder="yyyy/MM/dd"
                                    CssClass="form-control"
                                    Theme="PickerTheme.Blue"
                                    MarkHolidays="false" /> *@
            <CustomizeInputPersianDatePicker @bind-Value="filters.StartContractDate" />


        </div>

        <div class="col-12 col-md-2">
            <label class="form-label">تا تاریخ قرارداد</label>
            <CustomizeInputPersianDatePicker @bind-Value="filters.EndContractDate" />
        </div>

        <div class="d-none d-md-block col-md-5"><!-- filler --></div>
    </div>



    <div class="mt-4">
        <button type="submit" class="btn btn-primary">جستجو</button>
    </div>
</EditForm>

@if (isSearching)
{
    <div class="alert alert-info mt-3">در حال جستجو...</div>
}
else if (results is not null && results.Any())
{
    <div class="mt-4">
        <BudgetTable Records="@results" ShowActions="true" DeleteRecordAsync="@DeleteAsync" />
    </div>
}
else if (results is not null)
{
    <div class="alert alert-warning mt-4">هیچ رکوردی مطابق فیلترها یافت نشد.</div>
}


@code {
    private FilterModel filters = new();
    private List<BudgetRecord>? results;
    private bool isSearching = false;

    private List<string> titleSuggestions = new();
    private List<string> ExecutiveDeptOptions = new();

    private class FilterModel
    {
        public string? SubProjectCode { get; set; }
        public string? ContractTitle { get; set; }
        public string? ContractNumber { get; set; }
        public string? StartContractDate { get; set; }
        public string? EndContractDate { get; set; }
        public string? ExecutiveDept { get; set; }
    }
}


@functions {

    protected async override Task OnInitializedAsync()
    {
        ExecutiveDeptOptions = await BudgetRepository.GetExecutiveDeptAsync();
       
        // filters.ExecutiveDept = null; Pre-select a ExecutiveDeputy
    }

    private async Task UpdateTitleSuggestions(ChangeEventArgs e)
    {
        var input = e.Value?.ToString()?.Trim();
        if (string.IsNullOrWhiteSpace(input)) return;

        var all = await BudgetRepository.GetAllAsync();
        titleSuggestions = all
            .Select(r => r.ContractTitle)
            .Where(t => !string.IsNullOrEmpty(t))         // remove null or empty
            .Where(t => t!.Contains(input, StringComparison.OrdinalIgnoreCase))
            .Distinct()
            .Take(10)
            .ToList()!;
    }

    private async Task SearchAsync()
    {
        isSearching = true;

        DateTime? start = filters.StartContractDate?.PersianDigitsToLatin().TryParseShamsiDateToMiladi();
        DateTime? end = filters.EndContractDate?.PersianDigitsToLatin().TryParseShamsiDateToMiladi();

        var all = await BudgetRepository.GetAllAsync();

        results = all
            .Where(r =>
            {
                // فیلترهای متنی
                bool matchSubProjectCode = string.IsNullOrWhiteSpace(filters.SubProjectCode) ||
                               r.SubProjectCode.Equals(filters.SubProjectCode.Trim(), StringComparison.OrdinalIgnoreCase);

                bool contractTitle = string.IsNullOrWhiteSpace(filters.ContractTitle) ||
                          r.ContractTitle!.Contains(filters.ContractTitle.Trim(), StringComparison.OrdinalIgnoreCase);

                bool contractNumber = string.IsNullOrWhiteSpace(filters.ContractNumber) ||
                           r.ContractNumber!.Contains(filters.ContractNumber.Trim(), StringComparison.OrdinalIgnoreCase);

                // فیلترهای انتخابی
                var exec = filters.ExecutiveDept?.Trim();
                bool matchExecutiveDept =
                    string.IsNullOrWhiteSpace(exec) ||
                    (!string.IsNullOrWhiteSpace(r.ExecutiveDept) &&
                     string.Equals(r.ExecutiveDept, exec, StringComparison.OrdinalIgnoreCase));


                // تبدیل تاریخ قرارداد
                DateTime? contractDate = (r.ContractDate).TryParseShamsiDateToMiladi();

                bool matchStart = !start.HasValue || (contractDate != null && contractDate.Value.Date >= start.Value.Date);
                bool matchEnd = !end.HasValue || (contractDate != null && contractDate.Value.Date <= end.Value.Date);


                return matchSubProjectCode && contractTitle && contractNumber && matchExecutiveDept && matchStart && matchEnd;
            })
            .ToList();

        isSearching = false;
    }

    private async Task DeleteAsync(string subProjectCode)
    {
        await BudgetRepository.DeleteBySubProjectCodeAsync(subProjectCode);
        await BudgetRepository.SaveChangesAsync();

        if (results is not null)
        {
            results.RemoveAll(r => r.SubProjectCode == subProjectCode);
        }
    }
}