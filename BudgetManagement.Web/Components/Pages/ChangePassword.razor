@page "/ChangePassword"
@rendermode InteractiveServer
@attribute [Authorize]

@using System.ComponentModel.DataAnnotations
@using BudgetManagement.Application.Interfaces
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IAuditLogger AuditLogger

<h3 class="mb-4">تغییر رمز عبور</h3>

@if (!string.IsNullOrEmpty(SuccessMessage))
{
    <div class="alert alert-success">@SuccessMessage</div>
}
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<div class="container">
    <div class="row">
        <div class="col-12 col-md-4">

            <EditForm Model="@model" OnValidSubmit="HandleChangePassword" FormName="ChangePassword">
                <DataAnnotationsValidator />

                <div class="mb-3">
                    <label class="form-label">رمز عبور فعلی</label>
                    <InputText @bind-Value="model.CurrentPassword" type="password" class="form-control" placeholder="رمز عبور فعلی را وارد کنید" />
                    <ValidationMessage For="@(() => model.CurrentPassword)" />
                </div>

                <div class="mb-3">
                    <label class="form-label">رمز عبور جدید</label>
                    <InputText @bind-Value="model.NewPassword" type="password" class="form-control" placeholder="رمز عبور جدید را وارد کنید" />
                    <ValidationMessage For="@(() => model.NewPassword)" />
                </div>

                <div class="mb-3">
                    <label class="form-label">تکرار رمز عبور جدید</label>
                    <InputText @bind-Value="model.ConfirmPassword" type="password" class="form-control" placeholder="تکرار رمز عبور جدید را وارد کنید" />
                    <ValidationMessage For="@(() => model.ConfirmPassword)" />
                </div>

                <button type="submit" class="btn btn-primary">ذخیره</button>
                <a href="#" class="btn btn-secondary ms-2" type="button">انصراف</a>
            </EditForm>

        </div>
    </div>
</div>


@code {
    private ChangePasswordModel model = new();
    private string? SuccessMessage;
    private string? ErrorMessage;

    public class ChangePasswordModel
    {
        [Required(ErrorMessage = "رمز عبور فعلی الزامی است")]
        public string CurrentPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "رمز عبور جدید الزامی است")]
        [StringLength(100, ErrorMessage = "رمز عبور باید حداقل {2} کاراکتر باشد", MinimumLength = 8)]
        public string NewPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "تکرار رمز عبور جدید الزامی است")]
        [Compare("NewPassword", ErrorMessage = "رمز عبور جدید و تکرار آن یکسان نیستند")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }

    private async Task HandleChangePassword()
    {
        SuccessMessage = ErrorMessage = null;

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        if (user == null)
        {
            ErrorMessage = "کاربر یافت نشد.";
            return;
        }

        var result = await UserManager.ChangePasswordAsync(user, model.CurrentPassword, model.NewPassword);

        if (result.Succeeded)
        {
            await AuditLogger.LogAsync(user.Id, user.UserName!, "ChangePassword");
            SuccessMessage = "رمز عبور با موفقیت تغییر کرد.";
            model = new ChangePasswordModel(); // پاک کردن فرم
        }
        else
        {
            ErrorMessage = string.Join(" ", result.Errors.Select(e => e.Description));
        }
    }
}
