@page "/admin/users"
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin")]

@using BudgetManagement.Application.Interfaces
@using BudgetManagement.Infrastructure.Identity
@using Microsoft.EntityFrameworkCore
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Nav
@inject IAuditLogger AuditLogger
@inject AuthenticationStateProvider AuthStateProvider


<h3 class="mb-4">مدیریت کاربران</h3>

@if (vm is not null)
{
    <div class="row g-3 mb-4">
        <div class="col-md-4">
            <div class="card shadow-sm border-0 h-100">
                <div class="card-body text-center py-3">
                    <i class="bi bi-people-fill fs-3 text-secondary mb-1"></i>
                    <h6 class="text-muted mb-1">کل کاربران</h6>
                    <p class="fs-4 fw-bold mb-0">@vm.Users.Count</p>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card shadow-sm border-0 h-100">
                <div class="card-body text-center py-3">
                    <i class="bi bi-person-check-fill fs-3 text-success mb-1"></i>
                    <h6 class="text-muted mb-1">کاربران فعال</h6>
                    <p class="fs-4 fw-bold mb-0">@vm.Users.Count(u => u.LockoutEnd == null)</p>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card shadow-sm border-0 h-100">
                <div class="card-body text-center py-3">
                    <i class="bi bi-person-x-fill fs-3 text-danger mb-1"></i>
                    <h6 class="text-muted mb-1">کاربران غیرفعال</h6>
                    <p class="fs-4 fw-bold mb-0">@vm.Users.Count(u => u.LockoutEnd != null)</p>
                </div>
            </div>
        </div>
    </div>


}


<div class="mb-3">
    <button class="btn btn-success" @onclick="CreateUser">کاربر جدید</button>
</div>

<div class="mb-3 row">
    <div class="col-md-4">
        <input type="text" class="form-control" placeholder="جستجو بر اساس نام کاربری یا ایمیل..."
               @bind="searchTerm" @bind:event="oninput" />
    </div>
    <div class="col-md-3">
        <select class="form-select" @bind="selectedRole">
            <option value="">همه نقش‌ها</option>
            @foreach (var role in allRoles)
            {
                <option value="@role">@role</option>
            }
        </select>
    </div>
</div>


@if (vm is null)
{
    <p>در حال بارگذاری...</p>
}
else if (vm.Users.Count == 0)
{
    <p>هیچ کاربری یافت نشد.</p>
}
else
{
    @if (!string.IsNullOrEmpty(resultMessage))
    {
        <div class="alert alert-info">@resultMessage</div>
    }


    <table class="table table-striped">
        <thead>
            <tr>
                <th>نام و نام خانوادگی</th>
                <th>کد ملی</th>
                <th>نام کاربری</th>
                <th>ایمیل</th>
                <th>نقش‌ها</th>
                <th style="width:160px">عملیات</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var u in FilteredUsers)
            {
                <tr>
                    <td>@u.FullName</td>
                    <td>@u.NationalCode</td>
                    <td>@u.UserName</td>
                    <td>@u.Email</td>
                    <td>@string.Join(", ", vm.UserRoles.TryGetValue(u.Id, out var roles) ? roles : Array.Empty<string>())</td>
                    <td>
                        <button class="btn btn-sm btn-primary me-1" @onclick="() => EditUser(u.Id)">ویرایش</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(u.Id)">حذف</button>
                        <button class="btn btn-sm mt-2 @(u.LockoutEnd == null ? "btn-warning" : "btn-success")"
                                @onclick="() => ToggleUserStatus(u.Id)">
                            @(u.LockoutEnd == null ? "غیرفعال‌کردن" : "فعال‌کردن")
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (TotalPages > 1)
    {
        <nav>
            <ul class="pagination">
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="() => GoToPage(currentPage - 1)">قبلی</button>
                </li>
                @for (int i = 1; i <= TotalPages; i++)
                {
                    <li class="page-item @(currentPage == i ? "active" : "")">
                        <button class="page-link" @onclick="() => GoToPage(i)">@i</button>
                    </li>
                }
                <li class="page-item @(currentPage == TotalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="() => GoToPage(currentPage + 1)">بعدی</button>
                </li>
            </ul>
        </nav>
    }

}

@if (deleteConfirm.Open)
{
    <div class="modal fade show d-block" style="background: rgba(0,0,0,.4);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header"><h5 class="modal-title">حذف کاربر</h5></div>
                <div class="modal-body">آیا از حذف این کاربر مطمئن هستید؟ این عملیات قابل بازگشت نیست.</div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseConfirm">انصراف</button>
                    <button class="btn btn-danger" @onclick="DeleteUser">حذف</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private UsersViewModel? vm;
    private DeleteConfirm deleteConfirm = new();
    private string? resultMessage;

    private class UsersViewModel
    {
        public List<ApplicationUser> Users { get; set; } = new();
        public Dictionary<string, IList<string>> UserRoles { get; set; } = new();
    }

    private class DeleteConfirm
    {
        public bool Open { get; set; }
        public string? UserId { get; set; }
    }

    private string searchTerm = "";
    private string selectedRole = "";
    private List<string> allRoles = new();


    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();

        // گرفتن همه کاربران از دیتابیس
        var users = await UserManager.Users.ToListAsync();

        // گرفتن نقش‌ها در حافظه
        var roleSet = new HashSet<string>();
        foreach (var user in users)
        {
            var roles = await UserManager.GetRolesAsync(user);
            foreach (var role in roles)
                roleSet.Add(role);
        }

        allRoles = roleSet.ToList();
    }


    private async Task LoadUsers()
    {
        var users = await UserManager.Users.ToListAsync();
        var userRoles = new Dictionary<string, IList<string>>();
        foreach (var u in users)
        {
            var roles = await UserManager.GetRolesAsync(u);
            userRoles[u.Id] = roles;
        }

        vm = new UsersViewModel
        {
            Users = users,
            UserRoles = userRoles
        };
    }

    private IEnumerable<ApplicationUser> FilteredUsers =>
    vm!.Users
        .Where(u =>
            (string.IsNullOrEmpty(searchTerm) ||
             u.UserName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
             u.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            &&
            (string.IsNullOrEmpty(selectedRole) ||
             (vm.UserRoles.ContainsKey(u.Id) && vm.UserRoles[u.Id].Contains(selectedRole)))
        )
        .Skip((currentPage - 1) * pageSize)
        .Take(pageSize);


    private int currentPage = 1;
    private int pageSize = 10;
    private int TotalPages => (int)Math.Ceiling((double)FilteredCount / pageSize);
    private int FilteredCount => vm == null ? 0 :
        vm.Users.Count(u =>
            (string.IsNullOrEmpty(searchTerm) ||
             u.UserName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
             u.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            &&
            (string.IsNullOrEmpty(selectedRole) ||
             (vm.UserRoles.ContainsKey(u.Id) && vm.UserRoles[u.Id].Contains(selectedRole)))
        );
    private void GoToPage(int page)
    {
        if (page >= 1 && page <= TotalPages)
            currentPage = page;
    }

    private void CreateUser() => Nav.NavigateTo("/admin/users/UpsertUser");
    private void EditUser(string id) => Nav.NavigateTo($"/admin/users/UpsertUser/{id}");

    private void ConfirmDelete(string id)
    {
        deleteConfirm = new DeleteConfirm { Open = true, UserId = id };
        StateHasChanged();
    }

    private void CloseConfirm()
    {
        deleteConfirm = new DeleteConfirm();
    }

    private async Task<(string userId, string userName)> GetCurrentUserAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var currentUser = await UserManager.GetUserAsync(authState.User);
        return (currentUser?.Id ?? "", currentUser?.UserName ?? "Unknown");
    }



    // لیست کاربران محافظت‌شده
    private List<string> protectedUserNames = new List<string> { "admin", "administrator" };
    private List<string> protectedEmails = new List<string> { "admin@", "administrator@" };
    private List<string> adminRoles = new List<string> { "admin", "administrator" };

    private async Task ToggleUserStatus(string userId)
    {
        var targetUser = await UserManager.FindByIdAsync(userId);
        if (targetUser == null) return;

        // جلوگیری از غیرفعال کردن ادمین اصلی
        if (protectedUserNames.Contains(targetUser.UserName.Trim(), StringComparer.OrdinalIgnoreCase) ||
            protectedEmails.Any(prefix => targetUser.Email.Trim().StartsWith(prefix, StringComparison.OrdinalIgnoreCase)))
        {
            resultMessage = "ادمین سیستم را نمی‌توانید غیرفعال کنید.";
            return;
        }

        // جلوگیری از غیرفعال کردن خود کاربر توسط خودش//
        var (currentUserId, currentUserName) = await GetCurrentUserAsync();
        if (currentUserId == targetUser.Id)
        {
            resultMessage = "حساب کاربری خودتان را نمی‌توانید غیرفعال کنید.";
            CloseConfirm();
            return;
        }

        if (targetUser.LockoutEnd == null)
        {
            targetUser.LockoutEnd = DateTimeOffset.MaxValue; // غیرفعال
            await AuditLogger.LogAsync(currentUserId, currentUserName, "DeactivateUser", targetUser.UserName);
        }
        else
        {
            targetUser.LockoutEnd = null; // فعال
            await AuditLogger.LogAsync(currentUserId, currentUserName, "ActivateUser", targetUser.UserName);
        }

        await UserManager.UpdateAsync(targetUser);
        await LoadUsers();
    }

    private async Task DeleteUser()
    {
        if (string.IsNullOrWhiteSpace(deleteConfirm.UserId))
            return;

        var targetUser = await UserManager.FindByIdAsync(deleteConfirm.UserId);
        if (targetUser != null)
        {

            // جلوگیری از حذف ادمین اصلی
            if (protectedUserNames.Contains(targetUser.UserName.Trim(), StringComparer.OrdinalIgnoreCase) ||
                protectedEmails.Any(prefix => targetUser.Email.Trim().StartsWith(prefix, StringComparison.OrdinalIgnoreCase)))
            {
                resultMessage = "کاربر ادمین اصلی قابل حذف نیست.";
                CloseConfirm();
                return;
            }

            // جلوگیری از حذف آخرین ادمین//
            // بررسی اینکه آیا کاربر عضو یکی از نقش‌های هدف هست
            var userRoles = await UserManager.GetRolesAsync(targetUser);
            var isAdmin = userRoles.Any(role =>
                adminRoles.Contains(role.Trim(), StringComparer.OrdinalIgnoreCase));

            if (isAdmin)
            {
                // جمع‌آوری همه کاربران عضو نقش‌های ادمینی
                var allAdmins = new List<ApplicationUser>();
                foreach (var role in adminRoles)
                {
                    var usersInRole = await UserManager.GetUsersInRoleAsync(role);
                    allAdmins.AddRange(usersInRole);
                }

                // حذف کاربران تکراری (در صورت عضویت در چند نقش)
                var distinctAdmins = allAdmins
                    .GroupBy(u => u.Id)
                    .Select(g => g.First())
                    .ToList();

                if (distinctAdmins.Count == 1)
                {
                    resultMessage = "آخرین ادمین سیستم را نمی‌توانید حذف کنید.";
                    CloseConfirm();
                    return;
                }
            }

            // جلوگیری از حذف خود کاربر توسط خودش//
            var (currentUserId, currentUserName) = await GetCurrentUserAsync();
            if (currentUserId == targetUser.Id)
            {
                resultMessage = "حساب کاربری خودتان را نمی‌توانید حذف کنید.";
                CloseConfirm();
                return;
            }

            var result = await UserManager.DeleteAsync(targetUser);
            if (result.Succeeded)
            {
                await AuditLogger.LogAsync(currentUserId, currentUserName, "DeleteUser", targetUser.UserName);
                resultMessage = "کاربر حذف شد.";
                resultMessage = $"کاربر {targetUser.UserName} حذف شد.";
                CloseConfirm();
                return;
            }
            else
            {
                resultMessage = "خطا در حذف کاربر.";
                CloseConfirm();
                return;
            }


        }
        await LoadUsers();
        CloseConfirm();
    }

}
