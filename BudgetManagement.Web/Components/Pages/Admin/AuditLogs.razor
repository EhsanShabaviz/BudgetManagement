@page "/admin/AuditLogs"
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin")]

@using BudgetManagement.Application.DTOs
@using BudgetManagement.Application.Interfaces
@using BudgetManagement.Common.Extensions
@using BudgetManagement.Web.Common.Models
@using BudgetManagement.Web.Common.Services
@inject IBudgetRepository BudgetRepository
@inject IExportService ExportService
@inject IJSRuntime JS

<h3>لاگ کاربران</h3>

<div class="card shadow-sm border-0 mb-3" style="direction: rtl; text-align: right;">
    <div class="card-body bg-light rounded-3">
        <p class="mb-0" style="font-size: 1.1rem;">
            📌 در صورت نیاز از فیلترهای جستجو استفاده کنید.
        </p>
    </div>
</div>

<EditForm Model="@filters" OnValidSubmit="@SearchAsync" FormName="AuditLogsForm">
    <div class="row g-3">
        <div class="col-12 col-md-2">
            <label class="form-label">نام کاربری</label>
            <InputText @bind-Value="filters.UserName" class="form-control" />
        </div>

        <div class="col-12 col-md-4">
            <label class="form-label">نوع عملیات</label>
            <div class="input-group">
                <InputSelect @bind-Value="filters.ActionType" class="form-select">
                    <option value="">-- انتخاب کنید --</option>
                    @foreach (var act in ActionTypeOptions)
                    {
                        <option value="@act">@act</option>
                    }
                </InputSelect>
            </div>
        </div>

        <div class="col-12 col-md-4">
            <label class="form-label">توضیحات</label>
            <InputText @bind-Value="filters.Description" class="form-control" />
        </div>
    </div>

    <div class="row g-3 mt-2">
        <div class="col-12 col-md-2">
            <label class="form-label">IP Address</label>
            <InputText @bind-Value="filters.IPAddress" class="form-control" />
        </div>

        <div class="col-12 col-md-2">
            <label class="form-label">مرورگر</label>
            <InputText @bind-Value="filters.BrowserInfo" class="form-control" />
        </div>

        <div class="col-12 col-md-2">
            <label class="form-label">از تاریخ</label>
            <CustomizeInputPersianDatePicker @bind-Value="filters.StartDateTime" />
        </div>

        <div class="col-12 col-md-2">
            <label class="form-label">تا تاریخ</label>
            <CustomizeInputPersianDatePicker @bind-Value="filters.EndDateTime" />
        </div>
    </div>

    <div class="mt-4">
        <button type="submit" class="btn btn-primary">جستجو</button>
    </div>
</EditForm>

@if (isSearching)
{
    <div class="alert alert-info mt-3">در حال جستجو...</div>
}
else if (results is not null && results.Any())
{
    //Export Button
    <div class="mb-3 d-flex justify-content-end">
        <div class="btn-group">
            <button type="button" class="btn btn-outline-primary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false" disabled="@(results is null || !results.Any())">
                📤 Export
            </button>
            <ul class="dropdown-menu dropdown-menu-end">
                <li>
                    <button class="dropdown-item" @onclick="ExportToExcel" disabled="@(results is null || !results.Any())">
                        📊 Excel
                    </button>
                </li>
                <li>
                    <button class="dropdown-item" @onclick="ExportToPdf" disabled="@(results is null || !results.Any())">
                        📄 PDF
                    </button>
                </li>
            </ul>
        </div>
    </div>


    var sorted = TableSortService.Sort(results, State.SortColumn, State.SortAscending);
    State.TotalRecords = results.Count;
    var pageItems = TablePaginationService.Paginate(sorted, State.CurrentPage, State.PageSize).ToList();

    <div class="mt-4 table-responsive">
        <table class="table table-striped table-bordered table-sm text-center small align-middle">
            <thead class="table-light">
                <tr>
                    <th style="width:72px;" class="text-center">ردیف</th>
                    <th class="@GetSortClass(nameof(AuditLogDto.UserName)) text-center" @onclick="() => ChangeSort(nameof(AuditLogDto.UserName))">کاربر</th>
                    <th class="@GetSortClass(nameof(AuditLogDto.ActionType)) text-center" @onclick="() => ChangeSort(nameof(AuditLogDto.ActionType))">عملیات</th>
                    <th class="@GetSortClass(nameof(AuditLogDto.Description)) text-center" @onclick="() => ChangeSort(nameof(AuditLogDto.Description))">توضیحات</th>
                    <th class="@GetSortClass(nameof(AuditLogDto.DateTime)) text-center" @onclick="() => ChangeSort(nameof(AuditLogDto.DateTime))">تاریخ</th>
                    <th class="@GetSortClass(nameof(AuditLogDto.IPAddress)) text-center" @onclick="() => ChangeSort(nameof(AuditLogDto.IPAddress))">IP</th>
                    <th class="@GetSortClass(nameof(AuditLogDto.BrowserInfo)) text-center" @onclick="() => ChangeSort(nameof(AuditLogDto.BrowserInfo))">مرورگر</th>
                </tr>
            </thead>
            <tbody>
                @for (var i = 0; i < pageItems.Count; i++)
                {
                    var log = pageItems[i];
                    var rowIndex = (State.CurrentPage - 1) * State.PageSize + i + 1;

                    <tr>
                        <td>@rowIndex</td>
                        <td>@log.UserName</td>
                        <td>@log.ActionType</td>
                        <td class="text-start">@log.Description</td>
                        <td>@log.DateTime.ToShamsiDateTime()</td>
                        <td class="ltr">@log.IPAddress</td>
                        <td class="text-start">@log.BrowserInfo</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="d-flex justify-content-between align-items-center">
        <div class="d-flex justify-content-center text-muted small mt-2">
            مجموع: <span class="fw-bold text-dark mx-1">@State.TotalRecords</span> |
            صفحه <span class="fw-bold text-dark mx-1">@State.CurrentPage</span>
            از <span class="fw-bold text-dark mx-1">@State.TotalPages</span>
        </div>

        <div class="btn-group">
            <button class="btn btn-sm btn-outline-secondary" @onclick="GoToFirst" disabled="@(State.CurrentPage == 1)">⏭ اول</button>
            <button class="btn btn-sm btn-outline-secondary" @onclick="PrevPage" disabled="@(State.CurrentPage == 1)">قبلی</button>

            @for (var i = 1; i <= State.TotalPages; i++)
            {
                var pageNumber = i;
                <button class="btn btn-sm @(pageNumber == State.CurrentPage ? "btn-primary" : "btn-outline-primary")"
                        @onclick="() => GoToPage(pageNumber)">
                    @pageNumber
                </button>
            }

            <button class="btn btn-sm btn-outline-secondary" @onclick="NextPage" disabled="@(State.CurrentPage == State.TotalPages)">بعدی</button>
            <button class="btn btn-sm btn-outline-secondary" @onclick="GoToLast" disabled="@(State.CurrentPage == State.TotalPages)">آخر ⏮</button>
        </div>
    </div>
}
else if (results is not null)
{
    <div class="alert alert-warning mt-4">هیچ رکوردی مطابق فیلترها یافت نشد.</div>
}


@code {
    private bool isSearching = false;
    private List<AuditLogDto>? results;
    private List<string> ActionTypeOptions = new();

    // وضعیت جدول (صفحه‌بندی و مرتب‌سازی)
    private TableState State { get; set; } = new() { PageSize = 20 };

    private FilterModel filters = new();

    private class FilterModel
    {
        public string? UserName { get; set; }
        public string? ActionType { get; set; }
        public string? Description { get; set; }
        public string? StartDateTime { get; set; }
        public string? EndDateTime { get; set; }
        public string? IPAddress { get; set; }
        public string? BrowserInfo { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        ActionTypeOptions = await BudgetRepository.GetActionTypeAsync();
    }

    private async Task SearchAsync()
    {
        isSearching = true;

        DateTime? start = filters.StartDateTime?.PersianDigitsToLatin().TryParseShamsiDateToMiladi();
        DateTime? end = filters.EndDateTime?.PersianDigitsToLatin().TryParseShamsiDateToMiladi();

        var all = await BudgetRepository.GetAllAuditLogsWithUserAsync();

        results = all
            .Where(r =>
            {
                bool userName = string.IsNullOrWhiteSpace(filters.UserName) ||
                                r.UserName.Contains(filters.UserName.Trim(), StringComparison.OrdinalIgnoreCase);

                bool iPAddress = string.IsNullOrWhiteSpace(filters.IPAddress) ||
                                 r.IPAddress!.Contains(filters.IPAddress.Trim(), StringComparison.OrdinalIgnoreCase);

                bool browserInfo = string.IsNullOrWhiteSpace(filters.BrowserInfo) ||
                                   r.BrowserInfo!.Contains(filters.BrowserInfo.Trim(), StringComparison.OrdinalIgnoreCase);

                bool description = string.IsNullOrWhiteSpace(filters.Description) ||
                                   r.Description!.Contains(filters.Description.Trim(), StringComparison.OrdinalIgnoreCase);

                var exec = filters.ActionType?.Trim();
                bool matchActionType =
                    string.IsNullOrWhiteSpace(exec) ||
                    (!string.IsNullOrWhiteSpace(r.ActionType) &&
                     string.Equals(r.ActionType, exec, StringComparison.OrdinalIgnoreCase));

                bool matchStartDate = !start.HasValue || r.DateTime >= start.Value.Date;
                bool matchEndDate = !end.HasValue || r.DateTime <= end.Value.Date.AddDays(1).AddTicks(-1);

                return userName && iPAddress && browserInfo && description && matchActionType && matchStartDate && matchEndDate;
            })
            .OrderByDescending(r => r.DateTime)
            .ToList();

        isSearching = false;
    }

    private bool isExporting = false;

    private async Task ExportToExcel()
    {
        if (results is null || results.Count == 0 || isExporting) return;

        try
        {
            isExporting = true;
            var bytes = ExportService.ExportAuditLogsToExcel(results);
            var base64 = Convert.ToBase64String(bytes);
            var fileName = $"AuditLogs_{DateTime.Now:yyyyMMddHHmmss}.xlsx";

            await JS.InvokeVoidAsync("downloadFile",
                fileName,
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                base64);
        }
        finally
        {
            isExporting = false;
        }
    }

    private async Task ExportToPdf()
    {
        if (results is null || results.Count == 0 || isExporting) return;

        try
        {
            isExporting = true;
            var bytes = ExportService.ExportAuditLogsToPdf(results);
            var base64 = Convert.ToBase64String(bytes);
            var fileName = $"AuditLogs_{DateTime.Now:yyyyMMddHHmmss}.pdf";

            await JS.InvokeVoidAsync("downloadFile",
                fileName,
                "application/pdf",
                base64);
        }
        finally
        {
            isExporting = false;
        }
    }


    // -------------------------------
    // 📌 متدهای مربوط به Sort و Paging
    // -------------------------------

    private void ChangeSort(string column)
    {
        if (State.SortColumn == column)
            State.SortAscending = !State.SortAscending;
        else
        {
            State.SortColumn = column;
            State.SortAscending = true;
        }
        State.ResetPaging();
        StateHasChanged();
    }

    private string GetSortClass(string column)
    {
        if (State.SortColumn != column) return "sortable";
        return State.SortAscending ? "sortable asc" : "sortable desc";
    }

    private void GoToFirst() => State.CurrentPage = 1;

    private void GoToLast()
    {
        if (State.TotalPages > 0)
            State.CurrentPage = State.TotalPages;
    }

    private void PrevPage()
    {
        if (State.CurrentPage > 1)
            State.CurrentPage--;
    }

    private void NextPage()
    {
        if (State.CurrentPage < State.TotalPages)
            State.CurrentPage++;
    }

    private void GoToPage(int p)
    {
        if (p < 1) p = 1;
        if (p > State.TotalPages) p = State.TotalPages;
        State.CurrentPage = p;
        StateHasChanged();
    }
}
